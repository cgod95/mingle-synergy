rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function hasModeratorRole() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/roles/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isModerator == true;
    }
    
    // Allow users to read/write their own user profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow users to read all venues (public), but not write
    match /venues/{venueId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Allow users to read/write their own matches
    match /matches/{matchId} {
      allow read, write: if request.auth != null && (
        request.resource.data.userId1 == request.auth.uid || 
        request.resource.data.userId2 == request.auth.uid
      );
    }
    
    // Allow read access to all check-ins, but only allow users to write their own
    match /checkins/{checkinId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Interests - users can only read interests involving them
    match /interests/{interestId} {
      allow read: if isSignedIn() && (
        resource.data.fromUserId == request.auth.uid || 
        resource.data.toUserId == request.auth.uid
      );
      allow create: if isSignedIn() && 
        request.resource.data.fromUserId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // Verification records - only visible to the user and moderators
    match /userVerifications/{verificationId} {
      allow read: if isSignedIn() && (
        resource.data.userId == request.auth.uid || hasModeratorRole()
      );
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && hasModeratorRole();
      allow delete: if false;
    }
    
    // Messages subcollection under matches - only match participants can read/write
    match /matches/{matchId}/messages/{messageId} {
      allow read, write: if isSignedIn() && (
        get(/databases/$(database)/documents/matches/$(matchId)).data.userId1 == request.auth.uid ||
        get(/databases/$(database)/documents/matches/$(matchId)).data.userId2 == request.auth.uid
      );
    }

    // NOTE: Venue check-in spoofing cannot be fully prevented with Firestore rules alone.
    // For true anti-spoofing, use backend validation (Cloud Functions) with geolocation checks.

    // NOTE: Time-based constraints (e.g., only allow messages during active match period)
    // cannot be enforced in Firestore rules. Enforce in backend or client logic.
  }
}
